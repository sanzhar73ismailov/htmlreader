Peer39 exercise
Part 2
You need to design and implement a system that categorizes web pages based on a keyword category.
A Keyword can contain either single word (one word only) or phrases up to 6 words.
A Keyword Category can contain 1 to 1000 words/phrases.
If a Keyword from a category is found on the page, then the page should be categorized with that
category. Match is case insensitive.
You should use the output text generated by the previous part.
For example:
Category “Star Wars” – has keywords “Star wars”, “starwars”, “star war”
Web page: https://www.starwars.com/news/everything-we-know-about-the-mandalorian containsthe
text:
Set about five years after the fall of the Empire, before the rise of the First
Order, The Mandalorian is an exploration of a new era in Star Wars storytelling
onscreen.
……
As you can see, this web page should be categorized as “Star Wars” because it contains the phrase
“STAR WARS”
1. Write models for Category and CategoryKeyword
a. No database is required – all models should be kept within memory
2. Initialize the models with the following categories and keywords (suggesting to implement
Runner.initializeModel)
a. Category name: Star Wars. Keywords: star war, starwars, starwar, starwars, r2d2, may
the force be with you
b. Category name: Basketball. Keywords: basketball, nba, ncaa, lebron james, john stokton,
anthony davis
3. implement a flow that classify URL for matching categories
a. Mention implementation complexity assuming the text length is N, number of categories
is M, max keyword length is K.
2
4. Implement Runner class
a. The main method get two parameters: list of categories and list of URLs and print all
matching categories. The given list of categories is a sub-set of the predefined
categories.
5. BONUS: Present the solution above (1-4) using K8s, keep in mind things like (monitoring,scaling
deployment etc). Please provide just the design doc.
General guidelines
● Implementation must be documented and readable
● Use java8 implementation guidelines
● You can add more library to build.gradle as needed – not required
● Bonus: write API that get URL/s and return if categories exist
● Bonus: write few implementations with different complexity
Delivery and testing guidelines
● Test your code against various example URLs with the two categories you created
o http://www.starwars.com
o https://www.imdb.com/find?q=star+wars&ref_=nv_sr_sm
o https://edition.cnn.com/sport
● Zip the project file or upload to drive and email to ...

